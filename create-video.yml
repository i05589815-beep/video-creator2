name: Create Video from Image and Audio

on:
  issues:
    types: [opened]

jobs:
  create-video:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout
      uses: actions/checkout@v4
      
    - name: Extract URLs from issue body
      id: extract_urls
      run: |
        # Extract URLs from issue body with error handling
        BODY="${{ github.event.issue.body }}"
        echo "Issue body: $BODY"
        
        # Extract image URL
        IMAGE_URL=$(echo "$BODY" | grep 'image_url:' | cut -d: -f2- | tr -d ' ' || echo "")
        if [ -z "$IMAGE_URL" ]; then
          echo "ERROR: No image_url found in issue body"
          IMAGE_URL="https://picsum.photos/1280/720"
          echo "Using fallback image: $IMAGE_URL"
        fi
        
        # Extract audio URL
        AUDIO_URL=$(echo "$BODY" | grep 'audio_url:' | cut -d: -f2- | tr -d ' ' || echo "")
        if [ -z "$AUDIO_URL" ]; then
          echo "ERROR: No audio_url found in issue body"
          AUDIO_URL="https://www.soundhelix.com/examples/mp3/SoundHelix-Song-1.mp3"
          echo "Using fallback audio: $AUDIO_URL"
        fi
        
        echo "image_url=$IMAGE_URL" >> $GITHUB_OUTPUT
        echo "audio_url=$AUDIO_URL" >> $GITHUB_OUTPUT
        echo "Final image URL: $IMAGE_URL"
        echo "Final audio URL: $AUDIO_URL"
        
    - name: Setup FFmpeg
      run: sudo apt-get update && sudo apt-get install -y ffmpeg
      
    - name: Download files with retries
      run: |
        # Download image with retries and fallback
        echo "Downloading image from: ${{ steps.extract_urls.outputs.image_url }}"
        for i in {1..3}; do
          if wget -q --timeout=30 "${{ steps.extract_urls.outputs.image_url }}" -O image.jpg; then
            echo "Image downloaded successfully (attempt $i)"
            break
          elif [ $i -eq 3 ]; then
            echo "ERROR: Image download failed after 3 attempts, using fallback"
            wget -q "https://picsum.photos/1280/720" -O image.jpg
          else
            echo "Image download failed (attempt $i), retrying in 5 seconds..."
            sleep 5
          fi
        done
        
        # Download audio with retries and fallback
        echo "Downloading audio from: ${{ steps.extract_urls.outputs.audio_url }}"
        for i in {1..3}; do
          if wget -q --timeout=30 "${{ steps.extract_urls.outputs.audio_url }}" -O audio.mp3; then
            echo "Audio downloaded successfully (attempt $i)"
            break
          elif [ $i -eq 3 ]; then
            echo "ERROR: Audio download failed after 3 attempts, using fallback"
            wget -q "https://www.soundhelix.com/examples/mp3/SoundHelix-Song-1.mp3" -O audio.mp3
          else
            echo "Audio download failed (attempt $i), retrying in 5 seconds..."
            sleep 5
          fi
        done
        
        echo "Files downloaded successfully:"
        ls -la
        file image.jpg || true
        file audio.mp3 || true
        
    - name: Create video
      run: |
        echo "Creating video with FFmpeg..."
        # Check if files exist and are valid
        if [ ! -f image.jpg ] || [ ! -f audio.mp3 ]; then
          echo "ERROR: Required files missing, using fallbacks"
          wget -q "https://picsum.photos/1280/720" -O image.jpg
          wget -q "https://www.soundhelix.com/examples/mp3/SoundHelix-Song-1.mp3" -O audio.mp3
        fi
        
        # Create video with error handling
        if ! ffmpeg -loop 1 -i image.jpg -i audio.mp3 \
          -c:v libx264 -tune stillimage -c:a aac \
          -b:a 192k -pix_fmt yuv420p -shortest \
          -vf "scale=1280:720" \
          -y output.mp4 2>&1; then
          
          echo "FFmpeg failed, trying alternative approach..."
          # Fallback: Create video from solid color with audio
          ffmpeg -f lavfi -i color=c=blue:s=1280x720:r=1 -i audio.mp3 \
            -c:v libx264 -c:a aac -shortest \
            -y output.mp4
        fi
        
        echo "Video creation completed. File info:"
        ls -la output.mp4
        file output.mp4 || true
        echo "Video duration:"
        ffprobe -i output.mp4 -show_entries format=duration -v quiet -of csv="p=0" || echo "Could not get duration"
        
    - name: Upload artifact
      uses: actions/upload-artifact@v4
      with:
        name: video
        path: output.mp4
        if-no-files-found: error
        retention-days: 1

    - name: Notify on failure
      if: failure()
      run: |
        echo "Workflow failed! Check the previous steps for errors."
        exit 1
